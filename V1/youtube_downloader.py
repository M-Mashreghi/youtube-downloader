# -*- coding: utf-8 -*-
"""Youtube Downloader.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dconIRkgfD5byt2d_hXEqvbl7dghCmqZ

# Put ur video link or music here
"""

# Created by M.Mashreghi

# Download a video
video_url_480 = ""
video_url_720 = ""
video_url_1080 = ""
video_url_best_quality = ""

# Download a playlist :
playlist_url_high_quallity = ""
playlist_url_480 = ""

# Download Thumbnail :
video_url_for_thumbnail = ""

# Download music from utube or even utube music:
video_url_for_music = ""

"""#ALL (Just run the cell)

## library and functions

### Install and Import library
"""


"""### Thumbnail downloader"""

import requests
from PIL import Image
import os

def download_thumbnail(video_url):
    try:
        # Extract video ID from the URL
        video_id = video_url.split('=')[-1]

        # Fetch the thumbnail URL
        thumbnail_url = f"https://img.youtube.com/vi/{video_id}/maxresdefault.jpg"

        # Create the 'thumbnails' directory if it doesn't exist
        if not os.path.exists('thumbnails'):
            os.makedirs('thumbnails')

        # Download the thumbnail and save it
        thumbnail_path = os.path.join('thumbnails', f"{video_id}.jpg")
        with open(thumbnail_path, 'wb') as f:
            response = requests.get(thumbnail_url)
            f.write(response.content)

        return thumbnail_path
    except Exception as e:
        return str(e)

# video_url = 'https://www.youtube.com/watch?v=4CiESD8IjmM'
# thumbnail_path = download_thumbnail(video_url_for_thumbnail)
# print(f"Thumbnail downloaded successfully: {thumbnail_path}")

"""### Download music"""

import yt_dlp

def download_youtube_audio(url):
    ydl_opts = {
        'format': 'bestaudio/best',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '320',
        }],
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        audio_file = ydl.prepare_filename(info)

    return audio_file

# Replace 'YOUTUBE_URL' with the URL of the YouTube video you want to download.
# url = 'https://youtube.com/shorts/CVj1HkqrY9s?feature=share'
# audio_file = download_youtube_audio(video_url_for_music)
# print(f"Downloaded audio file: {audio_file}")

"""### Download single video

#### Download single video with 480 or lower qulity
"""

import yt_dlp

def download_youtube_video_480(url, resolution='720'):
    try:
        resolutions = ['480', '320', '240']
        format_strings = [f'bestvideo[height<={res}]+bestaudio/best[height<={res}]' for res in resolutions]

        for format_str in format_strings:
            ydl_opts = {
                'format': format_str,
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(url, download=True)
                if info_dict.get('height') and info_dict['height'] <= int(resolution):
                    print(f"Download complete! Video in {info_dict['height']}p.")
                    return

        print(f"No available resolutions up to {resolution}p. Download failed.")

    except Exception as e:
        print(f"An error occurred: {str(e)}")

# Example usage:
# video_url_480 = "https://youtube.com/shorts/CVj1HkqrY9s?feature=share"
# download_youtube_video_480(video_url_480, resolution='480')

"""#### Download single video with 720 qulity"""

import yt_dlp

def download_youtube_video_720(url, resolution='720'):
    try:
        resolutions = ['720', '480', '320', '240']
        format_strings = [f'bestvideo[height<={res}]+bestaudio/best[height<={res}]' for res in resolutions]

        for format_str in format_strings:
            ydl_opts = {
                'format': format_str,
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(url, download=True)
                if info_dict.get('height') and info_dict['height'] <= int(resolution):
                    print(f"Download complete! Video in {info_dict['height']}p.")
                    return

        print(f"No available resolutions up to {resolution}p. Download failed.")

    except Exception as e:
        print(f"An error occurred: {str(e)}")

# Example usage:
# video_url_720 = "https://www.youtube.com/watch?v=Psr4HZmWHnQ"
# download_youtube_video_720(video_url_720, resolution='720')

"""#### Download single video with 1080 qulity"""

import yt_dlp

def download_youtube_video_1080(url, resolution='1080'):
    try:
        resolutions = ['1080' , '720', '480', '320', '240']
        format_strings = [f'bestvideo[height<={res}]+bestaudio/best[height<={res}]' for res in resolutions]

        for format_str in format_strings:
            ydl_opts = {
                'format': format_str,
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(url, download=True)
                if info_dict.get('height') and info_dict['height'] <= int(resolution):
                    print(f"Download complete! Video in {info_dict['height']}p.")
                    return

        print(f"No available resolutions up to {resolution}p. Download failed.")

    except Exception as e:
        print(f"An error occurred: {str(e)}")

# Example usage:
# video_url_1080 = "https://www.youtube.com/watch?v=Psr4HZmWHnQ"
# download_youtube_video_1080(video_url_1080, resolution='1080')

"""#### Download single video with best qulity"""

import yt_dlp

def download_youtube_video_best_quality(url):
    try:
        ydl_opts = {
            'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(url, download=True)

        print("Download complete!")
    except Exception as e:
        print(f"An error occurred: {str(e)}")



# Example usage:
# video_url_best_quality = "https://www.youtube.com/watch?v=Psr4HZmWHnQ"
# download_youtube_video_best_quality(video_url_best_quality)

"""### Download Playlist

#### Download high quality
"""

import re
from pytube import Playlist, YouTube

# Specify the output folder path
output_folder = "/content/downloads/"

def download_playlist(playlist_url):
    playlist = Playlist(playlist_url)
    playlist._video_regex = re.compile(r"\"url\":\"(/watch\?v=[\w-]*)")

    print(f"Downloading {len(playlist.video_urls)} videos from the playlist...")

    for video_url in playlist.video_urls:
        try:
            video = YouTube(video_url)
            video_stream = video.streams.filter(progressive=True, file_extension="mp4").order_by("resolution").desc().first()

            if video_stream is None:
                print(f"Video '{video.title}' has no available video streams. Skipping...")
                continue

            print(f"Downloading video '{video.title}'...")
            video_stream.download(output_path=output_folder)
            print(f"Video '{video.title}' downloaded successfully!")
        except Exception as e:
            print(f"Error downloading video: {str(e)}")

    print("All videos downloaded successfully!")

# Replace the following URL with the desired playlist URL
# download_playlist(playlist_url)

"""#### Download 480 quality"""

import re
from pytube import Playlist, YouTube

# Specify the desired resolution
desired_resolution = "480p"

# Specify the output folder path
output_folder = "/content/downloads/"

def download_playlist_480(playlist_url):
    playlist = Playlist(playlist_url)
    playlist._video_regex = re.compile(r"\"url\":\"(/watch\?v=[\w-]*)")

    print(f"Downloading {len(playlist.video_urls)} videos from the playlist...")

    for video_url in playlist.video_urls:
        try:
            video = YouTube(video_url)
            video_stream = video.streams.filter(res=desired_resolution, file_extension="mp4").first()

            if video_stream is None:
                print(f"Video '{video.title}' is not available in {desired_resolution}. Downloading the lowest quality...")
                # Get the lowest quality stream available (progressive stream)
                video_stream = video.streams.filter(progressive=True, file_extension="mp4").first()

            print(f"Downloading video '{video.title}'...")
            video_stream.download(output_path=output_folder)
            print(f"Video '{video.title}' downloaded successfully!")
        except Exception as e:
            print(f"Error downloading video: {str(e)}")

    print("All videos downloaded successfully!")

"""## subtitle

#### download a video subtitle
"""

import yt_dlp

# Function to download the YouTube video and extract subtitles
def download_and_extract_subtitles(video_url):
    ydl_opts = {
        'writesubtitles': True,
        'writeautomaticsub': True,
        'skip_download': True,
        'subtitlesformat': 'srt',
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(video_url, download=False)
        video_id = info_dict['id']
        ydl.download([video_url])

    return f'{video_id}.srt'

# video_url = "https://www.youtube.com/watch?v=N-xHcvug3WI"
# subtitle_file = download_and_extract_subtitles(video_url)

"""#### subtitle for playlist"""

import os
import zipfile
import shutil
from pytube import Playlist
from pytube import YouTube
from youtube_transcript_api import YouTubeTranscriptApi

# Function to download subtitles from a YouTube video
def download_subtitles_as_srt(video_url):
    try:
        # Get video title
        yt = YouTube(video_url)
        video_title = yt.title.replace(" ", "_").replace("/", "-")  # Replace spaces and / with underscores and dashes

        # Create the 'temp' folder if it doesn't exist
        temp_folder = "temp"
        os.makedirs(temp_folder, exist_ok=True)

        # Download the video using pytube in the 'temp' folder
        yt.streams.filter(file_extension='mp4', progressive=True, resolution='360p').first().download(output_path=temp_folder)
        video_filename = os.path.join(temp_folder, f"{video_title}.mp4")

        # Check if subtitles are available for the video
        transcript_list = YouTubeTranscriptApi.get_transcript(yt.video_id)
        if not transcript_list:
            print(f"No subtitles available for video: {video_url}")
            return None

        # Convert transcript to .srt format
        srt_data = ''
        for i, transcript in enumerate(transcript_list, start=1):
            start_time = transcript['start']
            end_time = transcript['start'] + transcript['duration']
            text = transcript['text'].replace('\n', ' ')
            srt_data += f"{i}\n{start_time} --> {end_time}\n{text}\n\n"

        # Save the .srt file in the 'subtitles' folder
        subtitles_folder = "subtitles"
        os.makedirs(subtitles_folder, exist_ok=True)  # Create the folder if it doesn't exist
        srt_filename = os.path.join(subtitles_folder, f"{video_title}.srt")
        with open(srt_filename, 'w', encoding='utf-8') as file:
            file.write(srt_data)

        # Remove the downloaded video file
        os.remove(video_filename)

        print(f"Subtitles downloaded for video: {video_url}")
        return srt_filename
    except Exception as e:
        print(f"Error downloading subtitles for video: {video_url}, Error: {e}")
        return None

# Function to create a Zip file from the 'subtitles' folder
def create_zip_from_subtitles():
    subtitles_folder = "subtitles"
    temp_folder = "temp"
    zip_filename = "subtitles.zip"

    try:
        # Create a Zip file from the 'subtitles' folder
        with zipfile.ZipFile(zip_filename, 'w') as zip_file:
            for foldername, subfolders, filenames in os.walk(subtitles_folder):
                for filename in filenames:
                    file_path = os.path.join(foldername, filename)
                    zip_file.write(file_path, os.path.relpath(file_path, subtitles_folder))

        print(f"Zip file '{zip_filename}' created successfully.")

        # Delete the 'temp' folder
        shutil.rmtree(temp_folder)
        print("Temporary folder 'temp' deleted successfully.")
    except Exception as e:
        print(f"Error creating Zip file or deleting 'temp' folder: {e}")

# Function to download subtitles for all videos in a playlist
def download_subtitles_for_playlist(playlist_url):
    playlist = Playlist(playlist_url)

    try:
        # Get the video URLs from the playlist using pytube
        video_urls = playlist.video_urls

        # Download subtitles for each video in the playlist
        for video_url in video_urls:
            srt_filename = download_subtitles_as_srt(video_url)
            if srt_filename:
                print(f"Subtitles downloaded for video: {video_url}")

        # Create a Zip file from the 'subtitles' folder
        create_zip_from_subtitles()
    except Exception as e:
        print(f"Error downloading playlist subtitles: {e}")

# # Provide the YouTube playlist URL
# playlist_url = "https://youtube.com/playlist?list=PLqYmG7hTraZDM-OYHWgPebj2MfCFzFObQ"

# # Call the function to download subtitles for the playlist
# download_subtitles_for_playlist(playlist_url)

"""## Main"""

# Created by M.Mashreghi


def main():
    if video_url_480 != "":
      download_youtube_video_480(video_url_480, resolution='480')
      subtitle_file = download_and_extract_subtitles(video_url_480)
    if video_url_720 != "":
      download_youtube_video_720(video_url_720, resolution='720')
      subtitle_file = download_and_extract_subtitles(video_url_720)

    if video_url_1080 != "":
      download_youtube_video_1080(video_url_1080, resolution='1080')
      subtitle_file = download_and_extract_subtitles(video_url_1080)

    if video_url_best_quality != "":
      download_youtube_video_best_quality(video_url_best_quality)
      subtitle_file = download_and_extract_subtitles(video_url_best_quality)

    if playlist_url_high_quallity != "":
      download_playlist(playlist_url_high_quallity)
      download_subtitles_for_playlist(playlist_url_high_quallity)
    if playlist_url_480 != "":
      download_playlist_480(playlist_url_480)
      download_subtitles_for_playlist(playlist_url_480)
    if video_url_for_thumbnail != "":
      thumbnail_path = download_thumbnail(video_url_for_thumbnail)
      print(f"Thumbnail downloaded successfully: {thumbnail_path}")
    if video_url_for_music != "":
      download_youtube_audio(video_url_for_music)
      subtitle_file = download_and_extract_subtitles(video_url_for_music)





if __name__ == "__main__":
    main()
